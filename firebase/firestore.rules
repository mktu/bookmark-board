rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isLoggedIn() {
      return request.auth.uid != null;
    }
    function hasProfileEditorPermission(rsc){
      return isLoggedIn() && request.auth.uid == rsc.id;
    }
    function hasGroupCreaterPrivilege(){
      return isLoggedIn() && 
        resource == null && 
        request.auth.uid == request.resource.data.owner &&
        request.auth.uid in request.resource.data.users;
    }
    function hasGroupEditorPrivilege(rsc){
      return isLoggedIn() && rsc.data.users!= null && request.auth.uid in rsc.data.users;
    }
    function hasGroupOwnership(rsc){
      return isLoggedIn() && request.auth.uid == rsc.data.owner;
    }
    function canRequest(groupRsc){
      return isLoggedIn() && 
        resource == null && 
        !(request.auth.uid in groupRsc.data.users) &&
        request.auth.uid == request.resource.data.sender;
    }
    function hasRequestDeletePrivilege(){
      return isLoggedIn() && request.auth.uid == resource.data.sender;
    }
    function hasRequestEditorPrivilege(groupRsc){
      return isLoggedIn() && request.auth.uid == groupRsc.data.owner
    }
    
    match /profiles/{profileId} {
      allow read, create : if isLoggedIn();
      allow update, delete : if hasProfileEditorPermission(resource);
      match /notifications/{notificationId}{
        allow update, read, create, delete : if isLoggedIn() && request.auth.uid == profileId;
      }
    }
    match /groups/{groupId} {
      allow create : if hasGroupCreaterPrivilege();
      allow update : if hasGroupEditorPrivilege(resource);
      allow read : if isLoggedIn();
      allow delete : if hasGroupOwnership(resource);
      match /bookmarks/{bookmarkId}{
        allow update, create, delete : if hasGroupEditorPrivilege(get(/databases/$(database)/documents/groups/$(groupId)));
        allow read : if isLoggedIn();
      }
      match /requests/{requestId}{
        allow create : if canRequest(get(/databases/$(database)/documents/groups/$(groupId)));
        allow update : if hasRequestEditorPrivilege(get(/databases/$(database)/documents/groups/$(groupId)));
        allow delete : if hasRequestDeletePrivilege();
        allow read : if isLoggedIn();
      }
      match /comments/{commentId}{
        allow read, update, create, delete : if isLoggedIn();
      }
      match /reactions/{requestId}{
        allow read, update, create, delete : if isLoggedIn();
      }
    }
  }
}